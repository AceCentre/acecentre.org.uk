.topArea {
  margin: 0 auto;
  width: 90%;
  max-width: var(--containerMaxWidth);

  display: grid;
  grid-template-columns: 3fr 4fr;
  gap: 3rem;
}

.share {
  margin: 1rem 0;
}

.italic {
  font-style: italic;
  margin: 0;
}

.progress {
  width: 100%;
}

.blockPicker {
  /* I hate using !important but the block picker uses inline styles so its the only way to override them */
  width: 100% !important;
  box-shadow: none !important;
}

.subheading {
  margin-bottom: 0;
}

/* Yeah so this is fragile. If react-color changes its dom structure this will definetly break
Its not the end of the world as it just adds a border. Annoyingly there is no way to pass a class
to the desired element. I could open an issue on react-color but they dont seem super responsive 
so its not really worth the hassle. */
/* The reason we want to add a border is just to make the white selector more obvious on a white background */
.blockPicker > :nth-child(3) > :first-child > span > div {
  border: 2px solid grey;
}

.errorMessage {
  color: red;
  font-weight: bold;
}

.resourcesList.resourcesList {
  margin: 3rem auto;
}

.downloadButton {
  margin: 1rem 0 2rem 0;
}

/** Mobile CSS */
@media (max-width: 760px) {
  .topArea {
    grid-template-columns: 1fr;
  }
}

.newsletterContainer {
  margin: 1rem auto;
}

.topSection {
  text-align: center;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
  width: 100%;
}

.topSection h2 {
  font-size: 24px;
  font-weight: bold;
  margin: 0;
}

.topSection p {
  margin: 0 auto;
}

.bottomContainer {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  align-items: center;
  margin-top: 3rem;
}

.closeButton {
  background: none;
  border: 0;

  color: #00537f;
  font-size: 16px;
  cursor: pointer;
}

.closeButton:hover,
.closeButton:focus {
  text-decoration: underline;
}

.container {
  margin: 0 auto;
  width: 90%;
  max-width: var(--containerMaxWidth);
}

.variablesGrid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 1rem;
  margin: 2rem 0;
}

.smallerVariablesGrid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin: 2rem 0;
}

.noMargin {
  margin: 0;
}

.avatar.avatar {
  background-color: #94c64e;
  color: #ffffff;
}

.icon.icon {
  font-size: 3rem;
}

.titles h2 {
  margin: 0;
}

.titles p {
  margin: 0;
}

.titles {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.itemButton {
  display: flex;
  align-items: center;
  flex-direction: row;
  gap: 1rem;
  margin: 1rem 0;
  cursor: pointer;
}
.itemPanel {
  padding-left: calc(42px + 1rem);
}

.card {
  display: flex;
  flex-direction: column;
  box-shadow: 0 2px 40px 0 rgba(0, 0, 0, 0.13);
  text-decoration: none;
  color: #333333;
  padding-top: 1rem;
  padding: 2rem;
  gap: 0.5rem;
}

.groupList {
  margin: 2rem 0;
}

.accordionHeader h2 {
  margin: 0;
}

.accordionHeader p {
  margin: 0;
}

.accordionHeader {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.card p {
  margin: 0;
}

.card h3 {
  margin: 0;
}

.spinner {
  text-align: center;
}

.fileIcon.fileIcon {
  font-size: 3.5rem;
}

.error {
  color: red;
}

.dropzone {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  border-width: 2px;
  border-radius: 2px;
  border-color: #eeeeee;
  border-style: dashed;
  background-color: #fafafa;
  color: #bdbdbd;
  outline: none;
  transition: border 0.24s ease-in-out;
}

.centerPicker {
  margin: 0 auto;
  margin-top: auto;
}

/** Mobile CSS */
@media (max-width: 1000px) {
  .variablesGrid {
    grid-template-columns: 1fr 1fr;
  }
}

/** Mobile CSS */
@media (max-width: 760px) {
  .variablesGrid {
    grid-template-columns: 1fr;
  }
  .smallerVariablesGrid {
    grid-template-columns: 1fr;
  }
}
