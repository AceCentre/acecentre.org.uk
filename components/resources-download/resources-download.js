import { useState } from "react";
import { Radio, RadioGroup } from "../filter-people/filter-people";
import styles from "./resources-download.module.css";

import { Button } from "../button/button";
import config from "../../lib/config";
import { useRouter } from "next/dist/client/router";

export const ResourcesDownload = ({ resource }) => {
  const variations = resource.variations || [];
  const downloadableVariations = variations.filter(
    (variation) => variation.instantDownloadAvailable
  );

  if (
    variations.length > 0 &&
    variations.length == downloadableVariations.length
  ) {
    return (
      <AllVariationsDownload resource={resource} variations={variations} />
    );
  }

  if (variations.length === 0 && !resource.instantDownloadAvailable) {
    return <SinglePurchasableProduct resource={resource} />;
  }

  if (variations.length === 0 && resource.instantDownloadAvailable) {
    return <SingleDownloadableProduct resource={resource} />;
  }

  throw new Error(`Uh oh, looks like we cant render ${resource.slug}`);

  // return (
  //   <div className={styles.container}>
  //     <h1>resources-download -- ResourcesDownload</h1>
  //     <p>This component is generated by plop</p>
  //   </div>
  // );
};

const useAddToCart = () => {
  const [disabled, setDisabled] = useState(false);
  const [error, setError] = useState(false);
  const router = useRouter();

  const addToCart = (body) => (event) => {
    event.preventDefault();
    setDisabled(true);

    fetch("/api/cart/add", {
      method: "POST",
      body: JSON.stringify(body),
    })
      .then(async (result) => {
        const response = await result.json();
        console.log(response);
        router.push("/checkout");
      })
      .catch((err) => {
        setError(true);
        throw err;
      });
  };

  return {
    disabled,
    addToCart,
    error,
  };
};

const SingleDownloadableProduct = ({ resource }) => {
  return (
    <div className={styles.downloadButtonContainer}>
      <Button href={`${config.baseUrl}${resource.downloadUrl}`}>
        Free download
      </Button>
    </div>
  );
};

// A product that can be purchased and has no variations
const SinglePurchasableProduct = ({ resource }) => {
  const { disabled, addToCart, error } = useAddToCart();

  return (
    <div>
      <p className={styles.price}>Â£{resource.price}</p>
      <div className={styles.addToCartButtonContainer}>
        <Button
          disabled={disabled}
          onClick={addToCart({
            productId: resource.id,
          })}
        >
          Add to cart
        </Button>
        {error && <p>Something went wrong adding this item to your cart</p>}
      </div>
    </div>
  );
};

// If there are multiple variations and they are all downloadable
const AllVariationsDownload = ({ variations }) => {
  const defaultVariation = variations[0];
  const [currentlySelected, setCurrentlySelected] = useState(
    defaultVariation.slug
  );

  const onChange = (value) => {
    console.log("Changed to", value);
    setCurrentlySelected(value);
  };

  const currentlySelectedFull = variations.find(
    (x) => x.slug == currentlySelected
  );

  return (
    <div>
      <p>Choose option:</p>
      <RadioGroup
        className={styles.radioGroup}
        aria-label="Filter staff"
        defaultValue={defaultVariation.slug}
        onChange={onChange}
      >
        {variations.map((variation) => {
          return (
            <Radio
              key={`variation-select-${variation.slug}`}
              value={variation.slug}
            >
              {variation.name}
            </Radio>
          );
        })}
      </RadioGroup>
      <div className={styles.downloadButtonContainer}>
        <Button href={`${config.baseUrl}${currentlySelectedFull.downloadUrl}`}>
          Free download
        </Button>
      </div>
    </div>
  );
};
