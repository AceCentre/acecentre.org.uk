name: Deploy and Test
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
  schedule:
    # Everyday at 2AM and 2PM
    - cron: "0 2,14 * * *"
concurrency:
  group: deploy-${{ github.head_ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  CalculateDeployKey:
    runs-on: ubuntu-latest
    outputs:
      deploy-key: ${{ steps.get-title.outputs.result }}
    steps:
      - name: Get Code
        uses: actions/checkout@v2
      - uses: actions/github-script@v5
        id: get-title
        with:
          result-encoding: string
          script: |
            const script = require('./scripts/calculate-deploy-key')
            const result = script(context);
            console.log('Deploy key:', result);

            return result;

  GetUniqueBuildId:
    runs-on: ubuntu-latest
    outputs:
      buildId: ${{ steps.time.outputs.dateTime }}
    steps:
      - name: Get Time
        id: time
        uses: Plabick/Remote-Time-Action@V1.0
        with:
          timezone: "GMT"

  Jest:
    runs-on: ubuntu-latest
    env:
      REDIS_URL: ${{ secrets.REDIS_URL }}
      GITHUB_SHA: ${{ github.sha }}
    steps:
      - name: Get Code
        uses: actions/checkout@v2

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install NPM deps
        run: yarn install

      - name: Run Jest Tests
        run: yarn test

      - uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: jest-coverage
          path: coverage
          # Github has size limits so this avoids hitting them
          retention-days: 1

  ESLint:
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v2

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install NPM deps
        run: yarn install

      - name: Run ESLint
        run: yarn run eslint .

  DeployNetlifyIntegration:
    runs-on: ubuntu-latest
    needs: [GetUniqueBuildId, CalculateDeployKey]
    outputs:
      deploy-name: ${{ needs.CalculateDeployKey.outputs.deploy-key }}
      deploy-url: https://${{ needs.CalculateDeployKey.outputs.deploy-key }}--acecentreorguk.netlify.app
    environment:
      name: ${{ needs.CalculateDeployKey.outputs.deploy-key }}
      url: https://${{ needs.CalculateDeployKey.outputs.deploy-key }}--acecentreorguk.netlify.app
    env:
      REDIS_URL: ${{ secrets.REDIS_URL }}
      GITHUB_SHA: ${{ github.sha }}
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      IMAGE_URL: https://${{ needs.CalculateDeployKey.outputs.deploy-key }}--acecentreorguk.netlify.app
      BUILD_ID: ${{ needs.GetUniqueBuildId.outputs.buildId }}
      DEPLOY_KEY: ${{ needs.CalculateDeployKey.outputs.deploy-key }}
      PROM_KEY: ${{ secrets.PROM_KEY }}
      MAILCHIMP_SERVER: ${{ secrets.MAILCHIMP_SERVER }}
      MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
      SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      SLACK_SECRET: ${{ secrets.SLACK_SECRET }}

    steps:
      - name: Get Code
        uses: actions/checkout@v2

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}

      - name: Install NPM deps
        run: yarn install

      - name: Run netlify deploy and build
        run: CONTEXT=deploy-preview netlify deploy --alias=${{ needs.CalculateDeployKey.outputs.deploy-key }} --build

  Cypress:
    needs: [DeployNetlifyIntegration]
    runs-on: ubuntu-latest
    env:
      CYPRESS_INCLUDE_TAGS: pre-deploy
    steps:
      - name: Get Code
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/Cypress
            node_modules
          key: cypress-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - run: npm i --force cypress @testing-library/cypress cypress-tags typescript

      - name: Cypress run
        with:
          config: baseUrl=${{ needs.DeployNetlifyIntegration.outputs.deploy-url }}
          record: true
          install: false
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_SECRET }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: cypress-io/github-action@v2

  DeployNetlify:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [GetUniqueBuildId, Cypress, Jest, ESLint]
    outputs:
      lighthousePathsFirst: ${{ steps.get-paths-first.outputs.result }}
      lighthousePathsSecond: ${{ steps.get-paths-second.outputs.result }}
      deploy-url: https://acecentre.org.uk
    environment:
      name: production
      url: https://acecentre.org.uk
    env:
      REDIS_URL: ${{ secrets.REDIS_URL }}
      GITHUB_SHA: ${{ github.sha }}
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      IMAGE_URL: https://acecentre.org.uk
      BUILD_ID: ${{ needs.GetUniqueBuildId.outputs.buildId }}
      DEPLOY_KEY: production
      PROM_KEY: ${{ secrets.PROM_KEY }}
      MAILCHIMP_SERVER: ${{ secrets.MAILCHIMP_SERVER }}
      MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
      SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      SLACK_SECRET: ${{ secrets.SLACK_SECRET }}

    steps:
      - name: Get Code
        uses: actions/checkout@v2

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}

      - name: Install NPM deps
        run: yarn install

      - name: Run netlify build and deploy
        run: CONTEXT=production netlify deploy --prod --build

      - uses: actions/github-script@v5
        id: get-paths-first
        with:
          script: |
            const script = require('./scripts/sitemap-to-lighthouse-list')
            return script(context, 256, 0);

      - uses: actions/github-script@v5
        id: get-paths-second
        with:
          script: |
            const script = require('./scripts/sitemap-to-lighthouse-list')
            return script(context, 256, 1);

  CypressPostDeploy:
    needs: [DeployNetlify]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      CYPRESS_INCLUDE_TAGS: post-deploy
    steps:
      - name: Get Code
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/Cypress
            node_modules
          key: cypress-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - run: npm i --force cypress @testing-library/cypress cypress-tags typescript

      - name: Cypress run
        with:
          config: baseUrl=${{ needs.DeployNetlify.outputs.deploy-url }}
          record: true
          install: false
        env:
          CYPRESS_MOODLE_USERNAME: ${{ secrets.CYPRESS_MOODLE_USERNAME }}
          CYPRESS_MOODLE_PASSWORD: ${{ secrets.CYPRESS_MOODLE_PASSWORD }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_SECRET }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: cypress-io/github-action@v2

  LighthouseFirst:
    needs: [DeployNetlify]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.DeployNetlify.outputs.lighthousePathsFirst) }}
    steps:
      - name: Get Code
        uses: actions/checkout@v2

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install NPM deps
        run: yarn install

      - name: Run Lighthouse
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_URL: ${{ needs.DeployNetlify.outputs.deploy-url }}
          LHCI_TOKEN: ${{ secrets.LHCI_BUILD_TOKEN }}
        run: yarn lighthouse --collect.url=${{ needs.DeployNetlify.outputs.deploy-url }}${{ matrix.path }}

  LighthouseSecond:
    needs: [DeployNetlify]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.DeployNetlify.outputs.lighthousePathsSecond) }}
    steps:
      - name: Get Code
        uses: actions/checkout@v2

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install NPM deps
        run: yarn install

      - name: Run Lighthouse
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_URL: ${{ needs.DeployNetlify.outputs.deploy-url }}
          LHCI_TOKEN: ${{ secrets.LHCI_BUILD_TOKEN }}
        run: yarn lighthouse --collect.url=${{ needs.DeployNetlify.outputs.deploy-url }}${{ matrix.path }}
