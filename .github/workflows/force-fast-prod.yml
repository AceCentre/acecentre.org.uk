name: Force Fast Prod
on: [workflow_dispatch]

jobs:
  GetUniqueBuildId:
    runs-on: ubuntu-latest
    outputs:
      buildId: ${{ steps.time.outputs.dateTime }}
    steps:
      - name: Get Time
        id: time
        uses: Plabick/Remote-Time-Action@V1.0
        with:
          timezone: "GMT"

  CalculateCloudinaryCloud:
    runs-on: ubuntu-latest
    env:
      CLOUDINARY_ONE_KEY: ${{ secrets.CLOUDINARY_ONE_KEY }}
      CLOUDINARY_ONE_SECRET: ${{ secrets.CLOUDINARY_ONE_SECRET }}
      CLOUDINARY_TWO_KEY: ${{ secrets.CLOUDINARY_TWO_KEY }}
      CLOUDINARY_TWO_SECRET: ${{ secrets.CLOUDINARY_TWO_SECRET }}
    outputs:
      cloudinary-cloud: ${{ steps.get-cloudinary-cloud.outputs.result }}
    steps:
      - name: Get Code
        uses: actions/checkout@v3

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install NPM deps
        run: yarn install
      - uses: actions/github-script@v6
        id: get-cloudinary-cloud
        with:
          result-encoding: string
          script: |
            const script = require('./scripts/calculate-cloudinary-cloud')
            const result = await script();
            console.log('Cloud:', result);
            return result;

  DeployNetlify:
    runs-on: ubuntu-latest
    needs: [GetUniqueBuildId, CalculateCloudinaryCloud]
    outputs:
      lighthousePaths: ${{ steps.get-paths.outputs.result }}
      deploy-url: https://acecentre.org.uk
    environment:
      name: production
      url: https://acecentre.org.uk
    env:
      REDIS_URL: ${{ secrets.REDIS_URL }}
      GITHUB_SHA: ${{ github.sha }}
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      IMAGE_URL: https://acecentre.org.uk
      BUILD_ID: ${{ needs.GetUniqueBuildId.outputs.buildId }}
      DEPLOY_KEY: production
      SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      SLACK_SECRET: ${{ secrets.SLACK_SECRET }}
      CLOUDINARY_CLOUD: ${{ needs.CalculateCloudinaryCloud.outputs.cloudinary-cloud }}

    steps:
      - name: Get Code
        uses: actions/checkout@v3

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}

      - name: Install NPM deps
        run: yarn install

      - name: Run debug command
        run: npx envinfo --system --binaries --npmPackages netlify-cli --npmGlobalPackages netlify-cli

      - name: Run netlify deploy and build
        run: yarn netlify deploy --prod --build --context production
